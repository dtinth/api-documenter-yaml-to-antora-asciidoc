import {
  CommandLineAction,
  CommandLineParser,
  CommandLineStringParameter,
} from '@rushstack/ts-command-line'
import { AsciiDocDocumentationGenerator } from './AsciiDocDocumentationGenerator'

export class CLI extends CommandLineParser {
  public constructor() {
    super({
      toolFilename: 'api-documenter-yaml-to-antora-asciidoc',
      toolDescription:
        'Converts universal reference YAML files generated by API Documenter to into Antora AsciiDoc files',
    })
    this.addAction(new AsciiDocAction())
  }

  protected onDefineParameters(): void {}
}
class AsciiDocAction extends CommandLineAction {
  private _inputFolderParameter!: CommandLineStringParameter
  private _outputFolderParameter!: CommandLineStringParameter

  public constructor() {
    super({
      actionName: 'asciidoc',
      summary: 'Generate documentation as AsciiDoc files (*.adoc)',
      documentation:
        'Generates API documentation as a collection of AsciiDoc files, for use in Antora documentation site generator.',
    })
  }

  protected onDefineParameters(): void {
    this._inputFolderParameter = this.defineStringParameter({
      parameterLongName: '--input-folder',
      parameterShortName: '-i',
      argumentName: 'FOLDER1',
      description:
        'Specifies the input folder containing the *.yaml files to be processed.',
      required: true,
    })

    this._outputFolderParameter = this.defineStringParameter({
      parameterLongName: '--output-folder',
      parameterShortName: '-o',
      argumentName: 'FOLDER2',
      description:
        'Specifies the output folder where the documentation will be written.',
    })
  }

  protected async onExecute(): Promise<void> {
    const inputFolder: string = this._inputFolderParameter.value!
    const outputFolder: string = this._outputFolderParameter.value || `.`
    await new AsciiDocDocumentationGenerator(
      inputFolder,
      outputFolder,
    ).generate()
  }
}
